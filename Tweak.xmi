/*
 _______  _______  _       _________ _______  _______  _______
 (  ____ \(  ____ \( \      \__   __/(  ____ )(  ____ \(  ____ \
 | (    \/| (    \/| (         ) (   | (    )|| (    \/| (    \/
 | (__    | |      | |         | |   | (____)|| (_____ | (__
 |  __)   | |      | |         | |   |  _____)(_____  )|  __)
 | (      | |      | |         | |   | (            ) || (
 | (____/\| (____/\| (____/\___) (___| )      /\____) || (____/\
 (_______/(_______/(_______/\_______/|/       \_______)(_______/

 NIGHT MODE FOR IOS - Initializer
 COPYRIGHT Â© 2018 GUILLERMO MORAN

*/
// static NSString* darkSafariJS = @"document.getElementsByTagName('*')[0].style.webkitTextFillColor='#F4F4F4'; var x = document.getElementsByTagName('*');var i; for (i = 0; i < x.length; i++) {x[i].style.backgroundColor = '#141414';};";
static NSString* darkCydiaJS = @"var x = document.getElementsByTagName('*');var i; for (i = 0; i < x.length; i++) {x[i].style.backgroundColor = 'transparent';x[i].style.borderColor = '#222222';};document.getElementsByTagName('*')[0].style.webkitTextFillColor='#F4F4F4';document.getElementsByTagName('body')[0].style.backgroundColor='#transparent';";
static NSString* darkSafariJS = @"var x = document.getElementsByTagName('*');var i; for (i = 0; i < x.length; i++) {x[i].style.backgroundColor = '#141414';x[i].style.borderColor = '#222222';};document.getElementsByTagName('*')[0].style.webkitTextFillColor='#F4F4F4';document.getElementsByTagName('body')[0].style.backgroundColor='#141414';";

#import <objc/runtime.h>


#import  "Utils/Interfaces.h"

#import "Utils/UIColor+Eclipse.h"
#import "Utils/UIImage+Eclipse.h"


#include <notify.h>

#include "Utils/Filters.xm"

/*
d8888b. d8888b. d88888b d88888b .d8888.
88  `8D 88  `8D 88'     88'     88'  YP
88oodD' 88oobY' 88ooooo 88ooo   `8bo.
88~~~   88`8b   88~~~~~ 88~~~     `Y8b.
88      88 `88. 88.     88      db   8D
88      88   YD Y88888P YP      `8888Y'
*/

#include "Utils/Preferences.xm"
#include "Utils/EclipseAdaptiveColorUtil.xm"



%group AppTerminator
#include "Utils/AppTerminator.xm"
%end

/*
  .d8b.  db      d88888b d8888b. d888888b .d8888.
 d8' `8b 88      88'     88  `8D `~~88~~' 88'  YP
 88ooo88 88      88ooooo 88oobY'    88    `8bo.
 88~~~88 88      88~~~~~ 88`8b      88      `Y8b.
 88   88 88booo. 88.     88 `88.    88    db   8D
 YP   YP Y88888P Y88888P 88   YD    YP    `8888Y'
*/

#include "UIKit/Alerts.xm"

/*
 d8b   db  .d8b.  db    db      d888888b d888888b d88888b .88b  d88. .d8888.
 888o  88 d8' `8b 88    88        `88'   `~~88~~' 88'     88'YbdP`88 88'  YP
 88V8o 88 88ooo88 Y8    8P         88       88    88ooooo 88  88  88 `8bo.
 88 V8o88 88~~~88 `8b  d8'         88       88    88~~~~~ 88  88  88   `Y8b.
 88  V888 88   88  `8bd8'         .88.      88    88.     88  88  88 db   8D
 VP   V8P YP   YP    YP         Y888888P    YP    Y88888P YP  YP  YP `8888Y'
*/

#include "UIKit/NavItems.xm"


/*
 db    db d888888b  .o88b.  .d88b.  db       .d88b.  d8888b.
 88    88   `88'   d8P  Y8 .8P  Y8. 88      .8P  Y8. 88  `8D
 88    88    88    8P      88    88 88      88    88 88oobY'
 88    88    88    8b      88    88 88      88    88 88`8b
 88b  d88   .88.   Y8b  d8 `8b  d8' 88booo. `8b  d8' 88 `88.
 ~Y8888P' Y888888P  `Y88P'  `Y88P'  Y88888P  `Y88P'  88   YD
*/

#include "UIKit/UIColorReplacement.xm"

/*
 db    db d888888b db    db d888888b d88888b db   d8b   db
 88    88   `88'   88    88   `88'   88'     88   I8I   88
 88    88    88    Y8    8P    88    88ooooo 88   I8I   88
 88    88    88    `8b  d8'    88    88~~~~~ Y8   I8I   88
 88b  d88   .88.    `8bd8'    .88.   88.     `8b d8'8b d8'
 ~Y8888P' Y888888P    YP    Y888888P Y88888P  `8b8' `8d8'
*/

#include "UIKit/UIView.xm"


/*
 d888888b db    db d888888b db    db d888888b d88888b db   d8b   db
 `~~88~~' `8b  d8' `~~88~~' 88    88   `88'   88'     88   I8I   88
    88     `8bd8'     88    Y8    8P    88    88ooooo 88   I8I   88
    88     .dPYb.     88    `8b  d8'    88    88~~~~~ Y8   I8I   88
    88    .8P  Y8.    88     `8bd8'    .88.   88.     `8b d8'8b d8'
    YP    YP    YP    YP       YP    Y888888P Y88888P  `8b8' `8d8'
*/

// #include "UIKit/UITextView.xm" Not sure we need this, forced dark mode handles it

//Text Caret
%hook UITextSelectionView

-(id)caretViewColor {
    UIColor* originalColor = %orig;
    if (isEnabled) {
        if (_selectedTint == 1) { // white... ugh
            return createEclipseDynamicColor(originalColor, BABY_BLUE_COLOR);
        }
        else {
            return createEclipseDynamicColor(originalColor, selectedTintColor());

        }
    }
    return %orig;
}

%end

/*
    Activity Indicator
*/

// #include "UIKit/UIActivityIndicatorView.xm" // Not sure we need this, forced dark mode handles it


/*
 d888888b db    db d888888b d88888b d888888b d88888b db      d8888b.
 `~~88~~' `8b  d8' `~~88~~' 88'       `88'   88'     88      88  `8D
    88     `8bd8'     88    88ooo      88    88ooooo 88      88   88
    88     .dPYb.     88    88~~~      88    88~~~~~ 88      88   88
    88    .8P  Y8.    88    88        .88.   88.     88booo. 88  .8D
    YP    YP    YP    YP    YP      Y888888P Y88888P Y88888P Y8888D'
*/

// #include "UIKit/UITextField.xm"

/*
 db    db d888888b db       .d8b.  d8888b. d88888b db
 88    88   `88'   88      d8' `8b 88  `8D 88'     88
 88    88    88    88      88ooo88 88oooY' 88ooooo 88
 88    88    88    88      88~~~88 88~~~b. 88~~~~~ 88
 88b  d88   .88.   88booo. 88   88 88   8D 88.     88booo.
 ~Y8888P' Y888888P Y88888P YP   YP Y8888P' Y88888P Y88888P
*/

%group UILabelHooks
#include "UIKit/UILabel.xm"
%end

/*
 d888888b  .d8b.  d8888b. db      d88888b
 `~~88~~' d8' `8b 88  `8D 88      88'
    88    88ooo88 88oooY' 88      88ooooo
    88    88~~~88 88~~~b. 88      88~~~~~
    88    88   88 88   8D 88booo. 88.
    YP    YP   YP Y8888P' Y88888P Y88888P
*/

#include "UIKit/UITableView.xm"

/*
 db   dD d88888b db    db d8888b.  .d88b.   .d8b.  d8888b. d8888b.
 88 ,8P' 88'     `8b  d8' 88  `8D .8P  Y8. d8' `8b 88  `8D 88  `8D
 88,8P   88ooooo  `8bd8'  88oooY' 88    88 88ooo88 88oobY' 88   88
 88`8b   88~~~~~    88    88~~~b. 88    88 88~~~88 88`8b   88   88
 88 `88. 88.        88    88   8D `8b  d8' 88   88 88 `88. 88  .8D
 YP   YD Y88888P    YP    Y8888P'  `Y88P'  YP   YP 88   YD Y8888D'
*/

#include "UIKit/UIKeyboard.xm"

/*
 .d8888. d888888b  .d8b.  d888888b db    db .d8888. d8888b.  .d8b.  d8888b.
 88'  YP `~~88~~' d8' `8b `~~88~~' 88    88 88'  YP 88  `8D d8' `8b 88  `8D
 `8bo.      88    88ooo88    88    88    88 `8bo.   88oooY' 88ooo88 88oobY'
 `  Y8b.    88    88~~~88    88    88    88   `Y8b. 88~~~b. 88~~~88 88`8b
 db   8D    88    88   88    88    88b  d88 db   8D 88   8D 88   88 88 `88.
 `8888Y'    YP    YP   YP    YP    ~Y8888P' `8888Y' Y8888P' YP   YP 88   YD
 */

// #include "UIKit/UIStatusBar.xm"

//LibColorPicker fixes

#include "TweakSupport/LibColorPickerFix.xm"

//System Applications

//Do not group SMS
// #include "Application_Support/SMS.xm"
//Do not group Contacts
#include "Application_Support/Contacts.xm"

#include "Application_Support/Phone.xm"
#include "Application_Support/Mail.xm"
#include "Application_Support/Safari.xm"
#include "Application_Support/Passbook.xm"
#include "Application_Support/Reminders.xm"
#include "Application_Support/Music.xm"
#include "Application_Support/Notes.xm"
#include "Application_Support/iTunesStore.xm"
#include "Application_Support/AppStore.xm"
#include "Application_Support/WatchApp.xm"
#include "Application_Support/Calendar.xm"
#include "Application_Support/Maps.xm"
#include "Application_Support/Photos.xm"
// #include "Application_Support/Settings.xm"

#include "UIKit/WiFiKit.xm"

// Third Party App Support

#include "Application_Support/WhatsApp.xm"
// #include "Application_Support/Instagram.xm"
#include "Application_Support/Twitter.xm"
#include "Application_Support/Kik.xm"
#include "Application_Support/Threema.xm"
#include "Application_Support/Telegram.xm"
#include "Application_Support/Tweetbot.xm"
#include "Application_Support/Tumblr.xm"
#include "Application_Support/Snapchat.xm"
#include "Application_Support/Soundcloud.xm"
#include "Application_Support/FBMessenger.xm"
#include "Application_Support/Tinder.xm"
#include "Application_Support/Cydia.xm"
#include "Application_Support/YouTube.xm"
#include "Application_Support/OneFootball.xm"
#include "Application_Support/Gmail.xm"
#include "Application_Support/Facebook.xm"

static void checkAppBlackList() {
    if (idIsEqual(@"com.facebook.Facebook")) {
        // isEnabled = NO;
        %init(Facebook);
    }
    if (idIsEqual(@"com.apple.calculator")) {
        isEnabled = NO;
    }
    if (idIsEqual(@"com.apple.Camera")) {
        isEnabled = NO;
    }
    if (idIsEqual(@"com.apple.Preferences")) {
        if (isBetterSettingsInstalled()) {
            isEnabled = NO;
        }
    }

}

static void checkRunningApp() {

    //Third Party Application
    if (idIsEqual(@"us.mxms.relay")) {
        //%init(RelayApp);
    }
    if (idIsEqual(@"com.vine.iphone")) {
        //VineApp
    }
    if (idIsEqual(@"com.tumblr.tumblr")) {
        %init(TumblrApp);
    }
    if (idIsEqual(@"com.tapbots.Tweetbot3")) {
        %init(TweetbotApp);
    }
    if (idIsEqual(@"ph.telegra.Telegraph")) {
        %init(TelegramApp);
    }
    if (idIsEqual(@"com.kik.chat")) {
        %init(KikApp);
    }
    if (idIsEqual(@"com.atebits.Tweetie2")) {
        %init(TwitterApp);
    }
    if (idIsEqual(@"com.burbn.instagram")) {
        // %init(InstagramApp);
    }
    if (idIsEqual(@"net.whatsapp.WhatsApp")) {
        %init(WhatsappApp);
    }
    //Added 6/4/14
    if (idIsEqual(@"com.toyopagroup.picaboo")) {
        //%init(SnapchatApp);
    }
    if (idIsEqual(@"com.soundcloud.TouchApp")) {
        %init(SoundcloudApp);
    }
    //Added 9/19/14
    if (idIsEqual(@"com.facebook.Messenger")) {
        %init(FBMessenger);
    }
    //Added 9/28
    if (idIsEqual(@"ch.threema.iapp")) {
        %init(ThreemaApp);
    }
    //Added 10/1
    if (idIsEqual(@"com.cardify.tinder")) {
        %init(TinderApp);
    }
    //Added 4/3/18
    if (idIsEqual(@"de.motain.iliga")) {
        %init(OneFootball);
    }
    //Stock Applications

    if (idIsEqual(@"com.apple.mobilephone")) {
        %init(PhoneApp);

        //dlopen("/Library/MobileSubstrate/DynamicLibraries/SleekPhone.dylib", RTLD_NOW);
    }
    if (idIsEqual(@"com.apple.mobilemail")) {
        %init(MailApp);
    }
    if (idIsEqual(@"com.apple.mobilesafari")) {
        %init(SafariApp);
        //isEnabled = NO;
    }
    if (idIsEqual(@"com.apple.Passbook")) {
        %init(PassbookApp);
    }
    if (idIsEqual(@"com.apple.reminders")) {
        %init(RemindersApp);
    }
    if (idIsEqual(@"com.apple.Music")) {
        //%init(MusicApp);
        %init(MusicApp, MusicPlayerTimeControl = objc_getClass("Music.PlayerTimeControl"), MusicNavBarBGView = objc_getClass("Music.NavigationBarBackgroundView"), PlayIntentControlsReusableView = objc_getClass("Music.PlayIntentControlsReusableView"));
    }
    if (idIsEqual(@"com.apple.mobilenotes")) {
        //isEnabled = NO;
        %init(NotesApp);
    }
    if (idIsEqual(@"com.apple.AppStore")) {
        //%init(AppstoreApp);
        %init(AppstoreApp, AppStoreSearchHeaderView = objc_getClass("AppStore.SearchHeaderView"), FadeInDynamicTypeButton = objc_getClass("AppStore.FadeInDynamicTypeButton"));

    }
    if (idIsEqual(@"com.apple.mobilecal")) {
        %init(CalendarApp);
        %init(CalendarFix);
    }
    if (idIsEqual(@"com.apple.MobileAddressBook")) {
        %init(ContactsApp);
    }
    if (idIsEqual(@"com.apple.MobileStore")) {
        %init(MobileStoreApp);
    }

    if (idIsEqual(@"com.saurik.Cydia")) {
        %init(CydiaApp);
    }
    if (idIsEqual(@"com.apple.Bridge")) {
        %init(WatchApp);
    }
    if (idIsEqual(@"com.apple.Maps")) {
        %init(MapsApp);
    }
    if (idIsEqual(@"com.apple.mobileslideshow")) {
        //%init(PhotosApp);
    }
    if (idIsEqual(@"com.apple.Preferences")) {
        if (!isBetterSettingsInstalled()) {
            %init(WiFiKitFix);
            // %init(PreferencesApp);
        }
    }
    if (idIsEqual(@"com.google.Gmail")) {
        %init(GMail);
    }

}

static void initializeApplications() {


    //Check if Application is on the blacklist

    //BOOL shouldAutoReplaceColors = NO;
    //BOOL applicationIsEnabledInSettings = YES;

    //BOOL shouldAutoReplaceColors = [[prefs objectForKey:[@"AutoColorReplacement-" stringByAppendingString:[UIApplication displayIdentifier]]] boolValue];
    //isEnabled = isTweakEnabled();

    BOOL applicationIsEnabledInSettings = [[prefs objectForKey:[@"EnabledApps-" stringByAppendingString:[UIApplication displayIdentifier]]] boolValue];
    BOOL shouldAutoReplaceColors = NO;


    isEnabled = isTweakEnabled();
    //isEnabled = false;

    checkAppBlackList();


    if (idIsEqual(@"com.apple.springboard")) {
        isEnabled = NO;
        return;
    }

    //If Tweak enabled:
    if (isEnabled) {
        checkRunningApp();
        %init(_ungrouped);


        // if (!idIsEqual(@"com.apple.mobilesafari")) {
            %init(SystemUIColors);
        // }

        if (customTextColorEnabled()) {
            %init(UILabelHooks)
        }

        //Fix clock app crashing
        isClockApp = idIsEqual(@"com.apple.mobiletimer");

        if (!idIsEqual(@"com.apple.mobilemail")) {
            darkenUIElements();
        }

        if (shouldAutoReplaceColors && !idIsEqual(@"com.apple.Preferences")) {

            %init(AutoReplaceColor);
        }

        //if (UniformityInstalled()) {
        //    dlopen("/Library/MobileSubstrate/DynamicLibraries/Uniformity.dylib", RTLD_NOW);
        //}

    }

}

// %hook NSBundle

// -(NSDictionary *)infoDictionary {
//     NSDictionary* originalDict = %orig;
//     NSMutableDictionary* mutableDict = [originalDict mutableCopy];
//     [mutableDict removeObjectForKey: @"UIUserInterfaceStyle"];
//     return mutableDict;
// }

// -(id)objectForInfoDictionaryKey:(NSString*)key {
//     if ([key isEqualToString: @"UIUserInterfaceStyle"]) {
//         return nil;
//     }
//     return %orig;
// }

// %end

// %hook UIWindow

// -(void)_setOverrideUserInterfaceStyle:(long long)arg1 {
//     return %orig(nil);
// }

// -(long long)overrideUserInterfaceStyle {
//     return nil;
// }

// -(void)setOverrideUserInterfaceStyle:(long long)arg1 {
//     return %orig(nil);
// }

// -(long long)_overrideUserInterfaceStyle {
//     return nil;
// }


// %end

static BOOL windowNeedsInterfaceOverride = YES;
static BOOL ranKeyWindowForTheFirstTime = NO;

%hook UIApplication

-(id)init {
    id app = %orig;
    // [self monitorFile];
    [NSNotificationCenter.defaultCenter addObserver:self selector:@selector(overrideKeyWindowStyle) name:@"UIUserInterfaceStyleArbiterStyleChangedNotification" object:nil];
    return app;
}

%new
-(void)overrideKeyWindowStyle {
    BOOL isAppDark = (ACTIVE_APPLICATION_USER_INTERFACE_STYLE == 2);
    UIWindow* window = [self keyWindow];
    if (windowNeedsInterfaceOverride) {
        if (isAppDark) {
            [window setOverrideUserInterfaceStyle: USER_INTERFACE_DARK];
        }
        else {
            [window setOverrideUserInterfaceStyle: USER_INTERFACE_LIGHT];
        }
    }
}

-(UIWindow*)keyWindow {
    UIWindow* window = %orig;

    if (!ranKeyWindowForTheFirstTime) {
        NSNumber *n = (NSNumber* )[uikit_prefs objectForKey:INTERFACE_PREFS_KEY];
        BOOL sysDarkModeEnabled = (n.intValue == 2);

        if (isEnabled) { // isEnabled means that both system dark mode and Eclipse are enabled in Settings
            
            BOOL isAppStillLight = (ACTIVE_APPLICATION_USER_INTERFACE_STYLE == 1);
            BOOL isAppDark = (ACTIVE_APPLICATION_USER_INTERFACE_STYLE == 2);

            if (isAppDark) {
                windowNeedsInterfaceOverride = NO; // Prevent override on apps that already support dark mode natively
                // ranKeyWindowForTheFirstTime = YES;
            }
            
            if (isAppStillLight && windowNeedsInterfaceOverride && sysDarkModeEnabled) { // App does not support dark mode
                os_log(OS_LOG_DEFAULT, "ECLIPSE: Overriding user interface style to dark");
                [window setOverrideUserInterfaceStyle: USER_INTERFACE_DARK]; // Force dark mode on all views through the key window
                // ranKeyWindowForTheFirstTime = YES;
            }
            os_log(OS_LOG_DEFAULT, "ECLIPSE: Current user interface style for app: %ld", ACTIVE_APPLICATION_USER_INTERFACE_STYLE);

        }
    }
    // NSString* executableName = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleExecutable"];
    // os_log(OS_LOG_DEFAULT, "ECLIPSE: Executable name is %@", executableName);


    // [window layoutSubviews]; // Probably not necessary

    return window;

}

// -(void)traitCollectionDidChange:(id)arg1 {
//     %orig;
//     os_log(OS_LOG_DEFAULT, "ECLIPSE : TRAIT COLLECTION CHANGED");

// }

%end


#import <os/log.h>


%ctor {

    NSArray *args = [[NSClassFromString(@"NSProcessInfo") processInfo] arguments];
	NSUInteger count = args.count;

    prefsChanged(NULL, NULL, NULL, NULL, NULL); // initialize prefs
    registerNotification(quitAppsRequest, QUIT_APPS_NOTIF);

	if (count != 0) {
		NSString *executablePath = args[0];
		if (executablePath) {
			NSString *processName = [executablePath lastPathComponent];
			BOOL isSpringBoard = [processName isEqualToString:@"SpringBoard"];
			BOOL isApplication = [executablePath rangeOfString:@"/Application"].location != NSNotFound;
            //BOOL isApplication = YES;

            if (isSpringBoard) {
                %init(AppTerminator);
                prefsChanged(NULL, NULL, NULL, NULL, NULL); // initialize prefs
                registerNotification(quitAppsRequest, QUIT_APPS_NOTIF);
            }
            if (isApplication && !isSpringBoard) {
            //if (true) {
                // IS APPLICATION

                //log bundle identifier
                const char *msg = [[NSBundle mainBundle].bundleIdentifier UTF8String];
                os_log(OS_LOG_DEFAULT, "ECLIPSE HOOKED BUNDLE IDENTIFIER : %s", msg);

                prefsChanged(NULL, NULL, NULL, NULL, NULL); // initialize prefs
            	// register to receive changed notifications
            	registerNotification(prefsChanged, PREFS_CHANGED_NOTIF);
                registerNotification2(userDefaultsChanged, (__bridge CFStringRef)NSUserDefaultsDidChangeNotification);

                // NoctisXI Support

                BOOL noctisInstalled = [[NSFileManager defaultManager] fileExistsAtPath:@"/Library/MobileSubstrate/DynamicLibraries/NoctisXI.dylib"];
                //BOOL noctisInstalled = [[NSFileManager defaultManager] fileExistsAtPath:@"/Library/noctis_installed"];

                if (noctisInstalled) {

                    os_log(OS_LOG_DEFAULT, "NOCTIS INSTALLED");

                    NSDictionary *applicationList = [[[NSDictionary alloc] initWithContentsOfFile:NOCTIS_ENABLED_APPS]?:[NSDictionary dictionary] copy];

                    NSDictionary *noctisxiPrefs = [[[NSDictionary alloc] initWithContentsOfFile:NOCTISXI_PREFS]?:[NSDictionary dictionary] copy];

                    NSDictionary *noctisPrefs = [[[NSDictionary alloc] initWithContentsOfFile:NOCTIS_PREFS]?:[NSDictionary dictionary] copy];

                    NSArray* enabledApps = [applicationList objectForKey:@"Enabled Apps"];

                    BOOL applicationsEnabled = [[noctisxiPrefs objectForKey:@"enabledApplications"] boolValue];
                    BOOL noctisIsEnabled = [[noctisPrefs objectForKey:@"LQDDarkModeEnabled"] boolValue];

                    if (applicationsEnabled && noctisIsEnabled) {
                        if (![enabledApps containsObject:[NSBundle mainBundle].bundleIdentifier]) {
                        	initializeApplications();
                        }
                    }
                    else {
                        initializeApplications();
                    }
                }
                else {
                    os_log(OS_LOG_DEFAULT, "NOCTIS NOT INSTALLED");
                    initializeApplications();
                }
			}
		}
	}
}
